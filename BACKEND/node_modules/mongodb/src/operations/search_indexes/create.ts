import type { Document } from 'bson';

import type { Collection } from '../../collection';
import type { Server } from '../../sdam/server';
import type { ClientSession } from '../../sessions';
import { AbstractOperation } from '../operation';

/**
 * @public
 */
export interface SearchIndexDescription {
  /** The name of the index. */
  name?: string;

  /** The index definition. */
  definition: Document;
}

/** @internal */
export class CreateSearchIndexesOperation extends AbstractOperation<string[]> {
  constructor(
    private readonly collection: Collection,
    private readonly descriptions: ReadonlyArray<SearchIndexDescription>
  ) {
    super();
  }

<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
  override get commandName() {
    return 'createSearchIndexes' as const;
  }

>>>>>>> eeae4201a6777d5af1c9e6afe4635349ec710a63
>>>>>>> d1b85ecbe2b4bb72cb75be9affb263d0bd314cc6
>>>>>>> 22fdebd3c0e8919a55245d6d3eb6094cfd65e41e
  override async execute(server: Server, session: ClientSession | undefined): Promise<string[]> {
    const namespace = this.collection.fullNamespace;
    const command = {
      createSearchIndexes: namespace.collection,
      indexes: this.descriptions
    };

<<<<<<< HEAD
    const res = await server.commandAsync(namespace, command, { session });
=======
<<<<<<< HEAD
    const res = await server.commandAsync(namespace, command, { session });
=======
<<<<<<< HEAD
    const res = await server.commandAsync(namespace, command, { session });
=======
    const res = await server.command(namespace, command, { session });
>>>>>>> eeae4201a6777d5af1c9e6afe4635349ec710a63
>>>>>>> d1b85ecbe2b4bb72cb75be9affb263d0bd314cc6
>>>>>>> 22fdebd3c0e8919a55245d6d3eb6094cfd65e41e

    const indexesCreated: Array<{ name: string }> = res?.indexesCreated ?? [];
    return indexesCreated.map(({ name }) => name);
  }
}
