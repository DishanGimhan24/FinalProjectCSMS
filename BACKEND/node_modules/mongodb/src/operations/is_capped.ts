import type { Collection } from '../collection';
import { MongoAPIError } from '../error';
import type { Server } from '../sdam/server';
import type { ClientSession } from '../sessions';
import { AbstractOperation, type OperationOptions } from './operation';

/** @internal */
export class IsCappedOperation extends AbstractOperation<boolean> {
  override options: OperationOptions;
  collection: Collection;

  constructor(collection: Collection, options: OperationOptions) {
    super(options);
    this.options = options;
    this.collection = collection;
  }

<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
  override get commandName() {
    return 'listCollections' as const;
  }

>>>>>>> eeae4201a6777d5af1c9e6afe4635349ec710a63
>>>>>>> d1b85ecbe2b4bb72cb75be9affb263d0bd314cc6
>>>>>>> 22fdebd3c0e8919a55245d6d3eb6094cfd65e41e
  override async execute(server: Server, session: ClientSession | undefined): Promise<boolean> {
    const coll = this.collection;
    const [collection] = await coll.s.db
      .listCollections(
        { name: coll.collectionName },
        { ...this.options, nameOnly: false, readPreference: this.readPreference, session }
      )
      .toArray();
    if (collection == null || collection.options == null) {
      throw new MongoAPIError(`collection ${coll.namespace} not found`);
    }
    return !!collection.options?.capped;
  }
}
