import type { Document } from '../bson';
import type { Collection } from '../collection';
import type { Db } from '../db';
import type { ReadPreference } from '../read_preference';
import type { ClientSession } from '../sessions';

/** @public */
export interface IndexInformationOptions {
  full?: boolean;
  readPreference?: ReadPreference;
  session?: ClientSession;
}
/**
 * Retrieves this collections index info.
 *
 * @param db - The Db instance on which to retrieve the index info.
 * @param name - The name of the collection.
 */
export async function indexInformation(db: Db, name: string): Promise<any>;
export async function indexInformation(
  db: Db,
  name: string,
  options?: IndexInformationOptions
): Promise<any>;
export async function indexInformation(
  db: Db,
  name: string,
  options?: IndexInformationOptions
): Promise<any> {
  if (options == null) {
    options = {};
  }
  // If we specified full information
  const full = options.full == null ? false : options.full;
  // Get the list of indexes of the specified collection
  const indexes = await db.collection(name).listIndexes(options).toArray();
  if (full) return indexes;

  const info: Record<string, Array<[string, unknown]>> = {};
  for (const index of indexes) {
    info[index.name] = Object.entries(index.key);
  }
  return info;
}

<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> 22fdebd3c0e8919a55245d6d3eb6094cfd65e41e
export function prepareDocs(
  coll: Collection,
  docs: Document[],
  options: { forceServerObjectId?: boolean }
): Document[] {
<<<<<<< HEAD
=======
=======
<<<<<<< HEAD
export function prepareDocs(
  coll: Collection,
  docs: Document[],
  options: { forceServerObjectId?: boolean }
): Document[] {
=======
export function maybeAddIdToDocuments(
  coll: Collection,
  docs: Document[],
  options: { forceServerObjectId?: boolean }
): Document[];
export function maybeAddIdToDocuments(
  coll: Collection,
  docs: Document,
  options: { forceServerObjectId?: boolean }
): Document;
export function maybeAddIdToDocuments(
  coll: Collection,
  docOrDocs: Document[] | Document,
  options: { forceServerObjectId?: boolean }
): Document[] | Document {
>>>>>>> eeae4201a6777d5af1c9e6afe4635349ec710a63
>>>>>>> d1b85ecbe2b4bb72cb75be9affb263d0bd314cc6
>>>>>>> 22fdebd3c0e8919a55245d6d3eb6094cfd65e41e
  const forceServerObjectId =
    typeof options.forceServerObjectId === 'boolean'
      ? options.forceServerObjectId
      : coll.s.db.options?.forceServerObjectId;

  // no need to modify the docs if server sets the ObjectId
  if (forceServerObjectId === true) {
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> 22fdebd3c0e8919a55245d6d3eb6094cfd65e41e
    return docs;
  }

  return docs.map(doc => {
<<<<<<< HEAD
=======
=======
<<<<<<< HEAD
    return docs;
  }

  return docs.map(doc => {
=======
    return docOrDocs;
  }

  const transform = (doc: Document): Document => {
>>>>>>> eeae4201a6777d5af1c9e6afe4635349ec710a63
>>>>>>> d1b85ecbe2b4bb72cb75be9affb263d0bd314cc6
>>>>>>> 22fdebd3c0e8919a55245d6d3eb6094cfd65e41e
    if (doc._id == null) {
      doc._id = coll.s.pkFactory.createPk();
    }

    return doc;
<<<<<<< HEAD
  });
=======
<<<<<<< HEAD
  });
=======
<<<<<<< HEAD
  });
=======
  };
  return Array.isArray(docOrDocs) ? docOrDocs.map(transform) : transform(docOrDocs);
>>>>>>> eeae4201a6777d5af1c9e6afe4635349ec710a63
>>>>>>> d1b85ecbe2b4bb72cb75be9affb263d0bd314cc6
>>>>>>> 22fdebd3c0e8919a55245d6d3eb6094cfd65e41e
}
